#!/bin/bash

# Check the number of arguments provided
if [ "$#" -lt 1 ]; then
    exit 1
fi

# Parse the command
COMMAND=$1

# Check if node and npm are installed, and if not, install them
if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
    # Install Node.js using a package manager suitable for your system (e.g., apt, yum, brew)
    # Replace the installation command based on your system's package manager
    # For example, for Ubuntu, you can use:
    # sudo apt-get install -y nodejs

    # Install npm using the Node.js package manager (npm)
    curl -fsSL https://npmjs.com/install.sh | sh

    # Check if the installation was successful
    if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
        exit 1
    fi
fi

# Continue with the rest of the script

# Check which command is being executed
case $COMMAND in
    "install")
        # Install TypeScript and project dependencies
        npm install --save-dev typescript jest ts-jest @types/jest axios simple-git mocha sinon chai

        # Initialize jest configuration
        npx ts-jest config:init
        ;;

    "fetchGitHubInfo")
        # Compile TypeScript code
        tsc fetchGitHubInfo.ts

        # Assuming $2 contains the filename to be parsed
        node fetchGitHubInfo.js "$2"
        ;;

    "test")
        # Instead of running jest, we will run our custom test runner
        node test-runner.js
        ;;

    *)
        # Check if the file exists
        if [ ! -f "$COMMAND" ]; then
            exit 1
        fi

        # Compile the TypeScript file and check for errors
        tsc main.ts
        if [ $? -ne 0 ]; then
            exit 1
        fi

        # Run the compiled JavaScript file
        node main.js "$COMMAND"
        ;;
esac

# If the previous command was unsuccessful, exit with an error
if [ $? -ne 0 ]; then
    exit 1
fi

echo "Ending run script..."
exit 0
