#!/bin/bash

echo "Starting run script..."

# Check the number of arguments provided
if [ "$#" -lt 1 ]; then
    echo "Error: No arguments provided."
    exit 1
fi

# Parse the command
COMMAND=$1

# Check if node and npm are installed, and if not, install them
if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
    echo "Node.js and/or npm are not installed. Installing them..."

    # Install Node.js using a package manager suitable for your system (e.g., apt, yum, brew)
    # Replace the installation command based on your system's package manager
    # For example, for Ubuntu, you can use:
    # sudo apt-get install -y nodejs

    # Install npm using the Node.js package manager (npm)
    curl -fsSL https://npmjs.com/install.sh | sh

    # Check if the installation was successful
    if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
        echo "Error: Failed to install Node.js and/or npm."
        exit 1
    else
        echo "Node.js and npm installed successfully."
    fi
fi

# Continue with the rest of the script

# Check which command is being executed
case $COMMAND in
    "install")
        # Install TypeScript locally in your project directory
        npm install --save-dev typescript

        # Install project dependencies in userland
        npm install --global-style --save-dev jest ts-jest @types/jest

        # Initialize jest configuration
        npx ts-jest config:init

        echo "Dependencies installed..."
        ;;

    "fetchGitHubInfo")
        # Compile TypeScript code
        tsc fetchGitHubInfo.ts

        # Assuming $2 contains the filename to be parsed
        node fetchGitHubInfo.js "$2"
        ;;

    "test")
        # Install axios and simple-git packages before running tests
        npm install --global-style axios simple-git

        # Run jest for testing. Ensure that your TypeScript tests are either in a "__tests__" folder or end with ".test.ts".
        npx jest

        # Note: The output format will depend on your jest configuration and tests. Adjust as necessary.
        ;;

    *)
        # Check if the file exists
        if [ ! -f "$COMMAND" ]; then
            echo "Error: File $COMMAND not found."
            exit 1
        fi

        # Compile the TypeScript file and check for errors
        tsc main.ts
        if [ $? -ne 0 ]; then
            echo "Error: Compilation failed."
            exit 1
        fi

        # Run the compiled JavaScript file
        node main.js "$COMMAND"
        echo "Successfully compiled parser.ts to parser.js"
        ;;
esac

echo "Ending run script..."
exit 0
